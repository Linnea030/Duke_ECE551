Grading at 11/13/2022:21:32:42.582696
For commit ID 81776f240618bd63b9c73b5e9a39209ab9c109b3
Grading at Sun Nov 13 04:32:41 PM EST 2022
-----------------------------------------------
testcase 1 : Testing with BstMap<int,int>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<int, int>’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<int, int>’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = int; V = int]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<int, int>’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = int]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = int]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = int]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<int, int>’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = int]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = int]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = int]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = int; V = int]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 2 : Testing with BstMap<int,std::string>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<int, std::__cxx11::basic_string<char> >’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<int, std::__cxx11::basic_string<char> >’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = int; V = std::__cxx11::basic_string<char>]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<int, std::__cxx11::basic_string<char> >’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = std::__cxx11::basic_string<char>]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = std::__cxx11::basic_string<char>]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = std::__cxx11::basic_string<char>]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<int, std::__cxx11::basic_string<char> >’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = std::__cxx11::basic_string<char>]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = std::__cxx11::basic_string<char>]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = std::__cxx11::basic_string<char>]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = int; V = std::__cxx11::basic_string<char>]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 3 : Testing with BstMap<int,(a custom class we wrote)>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<int, Tester>’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<int, Tester>’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = int; V = Tester]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<int, Tester>’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = Tester]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = Tester]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = Tester]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<int, Tester>’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = int; V = Tester]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = Tester]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = int; V = Tester]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = int; V = Tester]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 4 : Testing with BstMap<std::string,int>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, int>’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<std::__cxx11::basic_string<char>, int>’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = std::__cxx11::basic_string<char>; V = int]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, int>’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = int]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = int]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = int]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, int>’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = int]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = int]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = int]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = std::__cxx11::basic_string<char>; V = int]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 5 : Testing with BstMap<std::string,std::string>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = std::__cxx11::basic_string<char>; V = std::__cxx11::basic_string<char>]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 6 : Testing with BstMap<std::string,(a custom class we wrote)>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, Tester>’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<std::__cxx11::basic_string<char>, Tester>’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = std::__cxx11::basic_string<char>; V = Tester]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, Tester>’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = Tester]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = Tester]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = Tester]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<std::__cxx11::basic_string<char>, Tester>’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = std::__cxx11::basic_string<char>; V = Tester]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = Tester]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = std::__cxx11::basic_string<char>; V = Tester]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = std::__cxx11::basic_string<char>; V = Tester]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 7 : Testing with BstMap<(a custom class we wrote),int>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<Tester, int>’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<Tester, int>’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = Tester; V = int]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<Tester, int>’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = int]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = int]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = int]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<Tester, int>’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = int]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = int]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = int]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = Tester; V = int]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 8 : Testing with BstMap<(a custom class we wrote),std::string>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<Tester, std::__cxx11::basic_string<char> >’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<Tester, std::__cxx11::basic_string<char> >’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = Tester; V = std::__cxx11::basic_string<char>]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<Tester, std::__cxx11::basic_string<char> >’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = std::__cxx11::basic_string<char>]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = std::__cxx11::basic_string<char>]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = std::__cxx11::basic_string<char>]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<Tester, std::__cxx11::basic_string<char> >’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = std::__cxx11::basic_string<char>]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = std::__cxx11::basic_string<char>]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = std::__cxx11::basic_string<char>]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = Tester; V = std::__cxx11::basic_string<char>]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.
-----------------------------------------------
testcase 9 : Testing with BstMap<(a custom class we wrote),(a custom class we wrote)>
...compiling...
In file included from 89-tester.cpp:1:
bstmap.h:24:1: error: version control conflict marker in file
   24 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:29:1: error: version control conflict marker in file
   29 | >>>>>>> temp-branch
      | ^~~~~~~
bstmap.h:81:1: error: version control conflict marker in file
   81 | <<<<<<< HEAD
      | ^~~~~~~
bstmap.h:139:1: error: version control conflict marker in file
  139 | =======
      | ^~~~~~~
bstmap.h:192:1: error: version control conflict marker in file
  192 | >>>>>>> temp-branch
      | ^~~~~~~
89-tester.cpp: In function ‘int main()’:
89-tester.cpp:70:33: error: invalid new-expression of abstract class type ‘BstMap<Tester, Tester>’
   70 |   BSTMapTy * bmt = new BSTMapTy();
      |                                 ^
In file included from 89-tester.cpp:1:
bstmap.h:9:7: note:   because the following virtual functions are pure within ‘BstMap<Tester, Tester>’:
    9 | class BstMap : public Map<K, V> {
      |       ^~~~~~
In file included from bstmap.h:5,
                 from 89-tester.cpp:1:
map.h:8:16: note:     ‘void Map<K, V>::add(const K&, const V&) [with K = Tester; V = Tester]’
    8 |   virtual void add(const K & key, const V & value) = 0;
      |                ^~~
89-tester.cpp:95:36: error: invalid new-expression of abstract class type ‘BstMap<Tester, Tester>’
   95 |   BSTMapTy * m2 = new BSTMapTy(*bmt);
      |                                    ^
89-tester.cpp:119:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = Tester]’ is private within this context
  119 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:152:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = Tester]’ is private within this context
  152 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:164:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = Tester]’ is private within this context
  164 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:166:26: error: invalid new-expression of abstract class type ‘BstMap<Tester, Tester>’
  166 |   m = bmt = new BSTMapTy();
      |                          ^
89-tester.cpp:182:31: error: ‘const V& BstMap<K, V>::lookup(const K&) const [with K = Tester; V = Tester]’ is private within this context
  182 |         VALTYPE v = m2->lookup(k);
      |                     ~~~~~~~~~~^~~
In file included from 89-tester.cpp:1:
bstmap.h:63:21: note: declared private here
   63 |   virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
      |                     ^~~~~~
89-tester.cpp:194:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = Tester]’ is private within this context
  194 |   delete bmt;
      |          ^~~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
89-tester.cpp:195:10: error: ‘BstMap<K, V>::~BstMap() [with K = Tester; V = Tester]’ is private within this context
  195 |   delete m2;
      |          ^~
In file included from 89-tester.cpp:1:
bstmap.h:191:11: note: declared private here
  191 |   virtual ~BstMap<K, V>() { des(root); }
      |           ^
bstmap.h: In instantiation of ‘void BstMap<K, V>::remove(const K&) [with K = Tester; V = Tester]’:
bstmap.h:182:16:   required from here
bstmap.h:182:54: error: ‘remhelp’ was not declared in this scope
  182 |   virtual void remove(const K & key) { root = remhelp(root, key); }
      |                                               ~~~~~~~^~~~~~~~~~~
The code did not compile.  This test failed.

Overall Grade: F
